generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ✅ **Users Table**
model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  password     String?
  provider     String   @default("credentials") // (credentials, google, github)
  emailVerified DateTime?
  role         String   @default("student") // (student, admin, instructor)
  progress     Progress?
  assignments  Assignment[]
  mcqs         MCQAttempt[]
  certificates Certificate[]
  leaderboard  Leaderboard?
  badges       Badge[]
  createdAt    DateTime @default(now())

  Course Course[]
}

/// ✅ **Courses Table**
model Course {
  id          String   @id @default(uuid())
  title       String
  description String
  videoUrl    String?
  examples    Json
  instructor  User     @relation(fields: [instructorId], references: [id])
  instructorId String
  topics      Topic[]
  createdAt   DateTime @default(now())
}

/// ✅ **Topics Table**
model Topic {
  id        String   @id @default(uuid())
  title     String
  content   String
  videoUrl  String?
  examples  Json
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  mcqs      MCQ[]
  assignments Assignment[]
  createdAt DateTime @default(now())

  Progress Progress[]
}

/// ✅ **MCQs Table**
model MCQ {
  id        String   @id @default(uuid())
  question  String
  options   Json
  answer    String
  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   String
  attempts  MCQAttempt[]
}

/// ✅ **MCQ Attempts Table (To track user attempts)**
model MCQAttempt {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  mcq       MCQ      @relation(fields: [mcqId], references: [id])
  mcqId     String
  selectedAnswer String
  isCorrect Boolean
  createdAt DateTime @default(now())
}

/// ✅ **Assignments Table**
model Assignment {
  id         String   @id @default(uuid())
  topic      Topic    @relation(fields: [topicId], references: [id])
  topicId    String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  content    String
  status     String   @default("pending") // (pending, submitted, graded)
  grade      Int?
  createdAt  DateTime @default(now())
}

/// ✅ **Progress Tracking Table**
model Progress {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   String
  percentage Float    @default(0.0)
}

/// ✅ **Leaderboard Table**
model Leaderboard {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  stars     Int      @default(0)
  rank      Int?
}

/// ✅ **Certificates Table**
model Certificate {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  issuedAt  DateTime @default(now())
}

/// ✅ **Birthdays Table**
model Birthday {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  birthDate DateTime
}

/// ✅ **Chatbot History Table**
model ChatHistory {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  response  String
  createdAt DateTime @default(now())
}

/// ✅ **Badges Table (Gamification Feature)**
model Badge {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  name      String
  achievedAt DateTime @default(now())
}

/// ✅ **Streaks Table (Daily Challenge Rewards)**
model Streak {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  days      Int      @default(0)
  lastUpdated DateTime @default(now())
}
